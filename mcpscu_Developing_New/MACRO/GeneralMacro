!--------The following are the global macro that used for mcpscu--------------
!----------------Zhai Lei, 2019/01/14, Sichuan University-----------------


! We define the PreAssign macro for the reason of the potiential problem in pgice cygwin 17.10 and 18.4.
! The details is below, assume we define derived fortran type A and B like following:
!         TYPE,PUBLIC::A
!            integer::member = 0
!	  END TYPE
!
!         TYPE,PUBLIC::B
!            integer::member
!	  END TYPE
!
! Obviously, the only different between type A and B is that type A assign a init value for the member, but B not.
! When these derived are used in pgi linux version, everything is OK. However, when we use these derived type in
! pgice windows version(just cygwin environment), the error would occur in kernel while compiling.
! The position of the error happed like follow :
! attributes(global) subroutine Testkernel()
!   !---Local Vars---
!   type(A)::a
!   type(B)::b
!   integer::int_a
!   integer::int_b
!   !---Body---
!   int_a = a%member    ! wrong while compiling
!   int_b = b%member    ! OK while compiling
!
!   return
! end subroutine
!
! If we add -w -v compiling option, we would see that compiler print "xxxxx_A is undifined."
! So, in windows cygwin, we should not assign any member of derived fortran type an init value.

!---Based on our test, in GPU code,the max members size inner one class (include inherit from parent classes)
!---is 12*8 bytes, which mean if each one of the member is the kind of real*8 , only 12 members are supported
!---in one class. Otherwise, the PGI compiler cannot support some basic operator such as assignment(=) and some
!---errors would occur during compiling. So,if the members size greater than 12*8 bytes, we need to reload some
!---operators such as assignment(=) to let the compiler know that is right way to load this operator. Besides,
!---we need to ensure that the members are not pre-assignment some value such as AA = xx when the members size
!---greater than 12*8 bytes, otherwise, the compiler would give some error when you visiting the object member value
!---in device code while this object is a defined in function-local.

!---So, currently, we lent PREASSIGN be a commont

#ifdef CYGWIN
  #define PREASSIGN ! =
#else
  #define PREASSIGN ! =
#endif